#!/usr/bin/lua

local config = require('voucher.config')
local dba = require('voucher.db')
local logic = require('voucher.logic')
local ft = require('voucher.functools')
local utils = require('voucher.utils')
local uci = require('uci')
local json = require 'luci.json'

local uci_cursor = uci.cursor()
local arguments
local action
local context

captive_portal = {}

local function shell(command)
    local handle = io.popen(command)
    local result = handle:read("*a")
    handle:close()
    return result
end

local function printJson (obj)
    print(json.encode(obj))
end

local function dateNow()
    local output = shell('date +%s000')
    local parsed = string.gsub(output, "%s+", "")
    local dateNow = tonumber(parsed)
    return dateNow
end

local function shell(command)
    local handle = io.popen(command)
    local result = handle:read("*a")
    handle:close()
    return result
end

local function split(inputstr, sep)
    if sep == nil then
            sep = "+"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            table.insert(t, str)
    end
    return t
end

-- Show or change portal url
captive_portal.url = function(context)
    local url = ''
    if (context[1] == 'show') then
        url = uci_cursor:get("pirania", "base_config", "portal_url")
    else
        url = context[1] and context[1] or "http://thisnode.info/portal"
        uci_cursor:set("pirania", "base_config", "portal_url", url)
        uci_cursor:commit("pirania")
    end
    print(url)
end

-- Update voucher date
local function updateVoucher(secret, date)
    local result = {}
    local db = dba.load(config.db)
    local toRenew = {}
    for _, voucher in pairs (db.data) do
        if (voucher[2] == secret) then
            toRenew = voucher
        end
    end
    if (#toRenew > 0) then
        result.success = true
        toRenew[3] = tonumber(date)
        local validVouchers = ft.filter(function(row, index) return row[2] ~= secret end, db.data)
        local newDb = db
        newDb.data = validVouchers
        table.insert(newDb.data, toRenew)
        dba.save(config.db, newDb)
        else result.success = false
    end
    return result
end


--[[
--Checks if a context(defined by a mac and a voucher code)
--is authorized to be used, and associates the mac to the
--voucher code if needed.
--]]
captive_portal.auth_voucher = function(context)
    local mac = context[1]
    local voucher = context[2]

    local db = dba.load(config.db)
    local res = logic.auth_voucher(db, mac, voucher)
    print ( res.limit[1], res.limit[2], res.limit[3], res.limit[4] )
    if (res.success == true) then
        print('Saving to DB')
        print('...')
            dba.save(config.db, db)
        print('saved!')
    end
end

--[[
--Checks if the mac of the given context is allowed to browse.
--]]
captive_portal.status = function(context)
    local mac = context[1]

    local db = dba.load(config.db)
    print ( logic.status(db, mac) )
end

-- List all
captive_portal.list_vouchers = function()
    local result = {}
    local vName = 1
    local vSecret = 2
    local vExpire = 3
    local vMacsAllowed = 6
    local usedMacs = 7
    local db = dba.load(config.db)
    for _, v in pairs(db.data) do
        result[_] = {}
        local startName = 3
        local nameInfo = {}
        for word in v[vName]:gmatch("[^-]+") do
            table.insert(nameInfo, word)
        end
        if (nameInfo[1] == 'm') then
            result[_].type = 'member'
        else
            result[_].node = nameInfo[1]
            result[_].type = 'visitor'
            startName = 2
        end
        if (nameInfo[2] and startName == 3) then
            result[_].node = nameInfo[2]
        end
        if (#nameInfo > startName) then
            local t = nameInfo[startName]
            for k,v in ipairs(nameInfo) do
                if (k > startName) then
                    t = t..'-'..v
                end
            end
            result[_].name = t
        else result[_].name = nameInfo[startName]
        end
        local expireDate = tonumber(v[vExpire]) or 0
        if (expireDate < dateNow()) then
            result[_].type = 'invalid'
        end
        result[_].fullName = v[vName]
        result[_].expires = v[vExpire]
        result[_].voucher = v[vSecret]
        result[_].macsAllowed = v[vMacsAllowed]
        result[_].macs = split(v[usedMacs])
    end
    printJson(result)
end

-- Renew voucher
captive_portal.renew_voucher = function(context)
    local voucherSecret = context[1]
    local renewDate = context[2]
    printJson(updateVoucher(voucherSecret, renewDate))
end

-- Remove voucher
captive_portal.remove_voucher = function(context)
    local voucherSecret = context[1]
    printJson(updateVoucher(voucherSecret, 0))
end

--[[
--Adds a voucher to the db with the params defined by context.
--]]
captive_portal.add_voucher = function(context)
    local key = context[1]
    local voucher = context[2]
    local epoc = context[3]
    local upload = context[4] and context[4] or '0'
    local download = context[5] and context[5] or '0'
    local amountofmacsallowed = context[6] and context[6] or '0'
    local exists = false

    local db = dba.load(config.db)
    for _, v in pairs (db.data) do
        if (v[2] == voucher) then
            exists = true
        end
    end
    if exists == false then
        local retval = { logic.add_voucher(db, key, voucher, epoc, upload, download, amountofmacsallowed)}
        dba.save(config.db, db)
        print ( unpack(retval) )
    else
        print(0)
    end
end

captive_portal.add_many_vouchers = function(context, data)
    local result = {}
    local table = utils.split(data, "\n")
    local db = dba.load(config.db)
    local error = false
    for _,val in pairs (table) do
        local jdata = json.decode(val)
        local upload = jdata.upload and jdata.upload or '10'
        local download = jdata.download and jdata.download or '10'
        local amountofmacsallowed = jdata.amountofmacsallowed and jdata.amountofmacsallowed or '1'
        local res = logic.add_voucher(db, jdata.key, jdata.voucher, jdata.epoc, upload, download, amountofmacsallowed)
        if (res == nil) then error = true end
    end
    result.success = not error
    dba.save(config.db, db)
    printJson(result)
end

-- TODO refactor eliminate bash portion awk sed bash-isms
captive_portal.print_valid_macs = function()
    local db = dba.load(config.db)
    local macs = logic.valid_macs(db)
    for _, mac in ipairs(macs) do
        print ( mac )
    end
end

-- if is main
if debug.getinfo(2).name == nil then
    arguments = { ... }
    action = arguments[1]
    context = ft.filter(function(row, index) return index > 1 end, arguments)
    if (action == 'add_many_vouchers') then stdin = io.stdin:read("*all") end
    captive_portal[action](context, stdin)
end

return captive_portal
