#!/usr/bin/lua

local http = require('luci.http')
local logic = require('voucher.logic')
local redirect_page = require('voucher.utils').redirect_page
local uci_cursor = require('uci').cursor()
local dba = require('voucher.db')
local query_string = os.getenv("QUERY_STRING")
-- send("Status: 302 \r\n")
print("Content-type: text/html \n\n")
params = http.urldecode_params(query_string)
local res = logic.getIpv4AndMac()
local valid = logic.check_mac_validity(res.mac)
local noJs = params['nojs']

local url_authenticated = uci_cursor:get("pirania", "base_config", "url_authenticated")
local url_fail = uci_cursor:get("pirania", "base_config", "url_fail")
local url_info = uci_cursor:get("pirania", "base_config", "url_info")

local url

if (valid < 1) then
  local db = dba.load(config.db)
  local output
  local mac = res.mac
  local voucher = params['voucher']
  local prevUrl = params['prev']
  if (noJs == 'true') then
    local authCommand = "voucher auth_voucher " .. mac .. " ".. voucher
    ac = io.popen(authCommand, 'r')
    output = ac:read('*l')
    ac:close()
    local validationOut = tonumber(output)
    if (validationOut and validationOut > 0) then
      url = url_authenticated
    else
      url = url_fail
    end
  else
    local setParams = prevUrl and '?voucher='..voucher..'&prev='..prevUrl or'?voucher='..voucher
    local voucherValid = logic.check_voucher_validity(voucher, db)
    if (voucherValid.valid) then
      url = url_info..setParams
    else
      url = url_fail
    end
  end



else
  url = url_authenticated
end

print(redirect_page(url))

